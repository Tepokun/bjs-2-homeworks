function getArrayParams(...arr) {
  let min = Infiniti;
  let max = -Infinity;
  let sum = 0;

  for(let i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];

    }

    if (arr[i] < min) {
      min = arr[i];

    }
    
    sum += arr[i];
  }

  let avg = (sum / arr.length).toFixed(2);

  return { min: min, max: max, avg: avg };
}


  //Напишите функцию summElementsWorker, которая должна находить сумму элементов массива и возвращать её. 
  //Суммирование элементов можно реализовать аналогично первому заданию c помощью цикла или метода reduce.

function summElementsWorker(...arr) {

  if (arr.length === 0) {
    return 0;
  }

  let sum = 0;

  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }

  return sum;
}

  // Напишите функцию `differenceMaxMinWorker` для вычисления разницы максимального и минимального элементов.
  //   C помощью цикла или методов `Math.max` и `Math.min` найдите максимальное и минимальное значения.
  //   Возвращайте разницу этих значений.

function differenceMaxMinWorker(...arr) {

  if (arr.length === 0) {
    return 0;
  }

  let min = Infinity;
  let max = - Infinity;

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < min) {
      min = arr[i];
    }
    if (arr[i] > max) {
      max = arr[i];
    }
  }

  return max - min;
}

//Напишите функцию `differenceEvenOddWorker` вычисления разницы сумм чётных и нечётных элементов.
//  * Объявите две переменные, например, `sumEvenElement` и `sumOddElement`, в которых будут накапливаться чётные и нечётные элементы. 
//  Инициализируйте эти переменные начальными значениями — нулями.
//  * Реализуйте цикл для перебора всех элементов массива.
//  * При переборе каждый элемент проверяйте с помощью конструкции `if / else`.
//  * Если элемент чётный, то увеличивайте одну переменную (`sumEvenElement`), а если нечётный, то другую (`sumOddElement`).
//  * После выполнения цикла выполняйте возвращение разницы двух элементов.

function differenceEvenOddWorker(...arr) {

  if (arr.length === 0) {
    return 0;
  }

  let sumEvenElement = 0;
  let sumOddElement = 0;

  for (let i = 0; i < arr.length; i++) {
    
    if(Math.abs(arr[i]) % 2 === 0) {
      sumEvenElement += arr[i];
    } else {
      sumOddElement += arr[i];
    }
  }

  return sumEvenElement - sumOddElement;
}

// Напишите функцию `averageEvenElementsWorker`, которая будет вычислять среднее значение чётных элементов.
//   * Объявите две переменные, например, `sumEvenElement` и `countEvenElement`, в которых будут накапливаться сумма чётных элементов и их количество.
//   Инициализируйте эти переменные начальными значениями — нулями.
//   * Реализуйте цикл для перебора всех элементов массива.
//   * При переборе каждый элемент проверяйте с помощью конструкции `if`.
//   * Если элемент чётный, то увеличивайте одну переменную (`sumEvenElement`) на перебираемый элемент, а другую переменную (`countEvenElement`) — на единицу.
//   * После выполнения цикла выполняйте возвращение результата деления суммы элементов на их количество.

function averageEvenElementsWorker(...arr) {

  if (arr.length === 0) {
    return 0;
  }

  let sumEvenElement = 0;
  let countEvenElement = 0;

  for (let i = 0; i < arr.length; i++) {

    if(Math.abs(arr[i]) % 2 === 0) {
      sumEvenElement += arr[i];
    } else {
      countEvenElement++;
    }
  }

  return sumEvenElement / countEvenElement;
}

//Во всех функциях должна быть проверка наличия элементов. Если элементы не передавались в функцию, то нет смысла что-либо считать и можно сразу возвращать ноль.

// Напишите функцию `makeWork`, которая из массива данных и насадки будет возвращать максимальный результат функции насадки.

// 1. Функция `makeWork` принимает два аргумента: `arrOfArr` и `func`. В первом аргументе передаётся массив, элементы которого — массивы с данными, 
// которые будут передаваться в функцию-насадку. Вторым аргументом передаётся одна из функций насадок.
// 2. Инициализируйте переменную (`maxWorkerResult`), в которой будет формироваться максимальный результат, и инициализуйте её начальным значением. 
// Можно использовать самое минимальное числовое значение `-Infinity`, либо использовать результат насадки от самого первого элемента из полученных данных 
// (на позиции ноль массива `arrOfArr`). Используйте [spread-оператор] для разделения массива элементов на отдельные элементы.
// 3. Реализуйте цикл для перебора всех элементов массива `arrOfArr`.
// 4. Внутри цикла каждый перебираемый элемент передавайте в функцию-насадку. Используйте [spread-оператор]
// для разделения массива элементов на отдельные элементы. Результат функции сохраните в отдельную константу.
// 5. Добавьте проверку: полученное значение больше переменной, в которой формируется максимальное значение?
// 6. Если полученное значение больше переменной с максимумом, то переприсваивайте переменную максимума на полученное значение.
// 7. После выполнение цикла в переменной максимума должно быть максимальное значение результатов насадки. Эту переменную следует возвращать из функции.

function makeWork(arrOfArr, func) {
  let maxWorkerResult = -Infinity;

  for (const arr of arrOfArr) {
    const result = func(...arr);

    if (result > maxWorkerResult) {
      maxWorkerResult = result;
    }
  }

  return maxWorkerResult;
}

const arr = [[10, 10, 11, 20, 10], [67, 10, 2, 39, 88], [72, 75, 51, 87, 43], [30, 41, 55, 96, 62]];
